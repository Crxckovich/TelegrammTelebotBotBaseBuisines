import sqlite3
import telebot
from telebot import types
from dotenv import dotenv_values
import datetime

config = dotenv_values('.env')
bot = telebot.TeleBot(config.get('TELEGRAM_TOKEN'))

def executeAll(req):
      connection = sqlite3.connect(config.get('DB_NAME'))
      cursor = connection.cursor()
      cursor.execute(req)
      data = cursor.fetchall()
      connection.close()
      return data

def executeOne(req):
      connection = sqlite3.connect(config.get('DB_NAME'))
      cursor = connection.cursor()
      cursor.execute(req)
      data = cursor.fetchone()
      connection.close()
      return data


print('RABOTAET')


# –°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
@bot.message_handler(commands=['start','main','hello'])
def main(message):
    user_id = message.from_user.id
    balance = 160
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
  
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT * FROM users WHERE id=?', (user_id,))
    user_exists = cursor.fetchone()
    
    if not user_exists:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('INSERT INTO users (id, balance) VALUES (?, ?)', (user_id, balance))

    connection.commit()
    connection.close()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ú–µ–Ω—é‚úÖ', callback_data='menu'))
    markup.add(types.InlineKeyboardButton('–ù–ê–®–ò –û–¢–ó–´–í–´üí¨üìä', url='https://clck.ru/374VdC'))
    markup.add(types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='history'))
    markup.add(types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='addbalance'))
    markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='balance'))
    bot.send_photo(message.chat.id, parse_mode= 'html',  photo=open('photo.png',  'rb'), caption=f'<b>–ü—Ä–∏–≤–µ—Ç</b>, {message.chat.first_name}!\n<b>–Ø –ë–û–¢ –ú–∞–≥–∞–∑–∏–Ω–∞ –†–ï–ô–õ | –î–∏–∑–∞–π–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ. –Ø —è–≤–ª—è—é—Å—å –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Ç–∞–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö</b> üòá',reply_markup=markup)


# –ü–û–°–ú–û–¢–†–ï–¢–¨ –ë–ê–õ–ê–ù–°
@bot.callback_query_handler(func=lambda call: call.data == 'balance')
def callback_menu(call):
   if call.data == 'balance':
        result = executeAll(f'SELECT balance FROM users WHERE id = {call.message.chat.id}')
        if result:
            balance = result[0]
            bot.send_message(call.message.chat.id, 'üíéüíµ–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {}'.format(balance))
        else:
            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == 'addbalance')
def callback_menu(call):
   if call.data == 'addbalance':
        connection = sqlite3.connect(config.get('DB_NAME'))
        cursor = connection.cursor()
        user_id = call.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(f'SELECT balance FROM users WHERE id = {user_id}')
        result = cursor.fetchone()
        if result:
            balance = result[0]
            bot.send_message(call.message.chat.id, 'üíéüíµ–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {}'.format(balance))
            bot.send_message(call.message.chat.id, 'üíéüíµ–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞üíµüíé:')
            bot.register_next_step_handler(call.message, process_balance_update)
        else:
            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

# –§–£–ù–ö–¶–ò–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
def process_balance_update(message):
    try:
        amount = int(message.text)
        user_id = message.from_user.id
        connection = sqlite3.connect(config.get('DB_NAME'))
        cursor = connection.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(f'SELECT balance FROM users WHERE id = {user_id}')
        result = cursor.fetchone()
        if result:
            balance = result[0]
            if amount <= 5000 and amount > 0:
               new_balance = balance + amount
               # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
               cursor.execute(f'UPDATE users SET balance = {new_balance} WHERE id = {user_id}')
               connection.commit()
               connection.close()
               bot.send_message(message.chat.id, 'üí∏–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {}üí∏'.format(new_balance))
            else:
                bot.send_message(message.chat.id, '–ù–µ–ª—å–∑—è –º–µ–Ω—å—à–µ 0 –∏ –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ 5000')
        else:
            connection.close()
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞')

# –ò–°–¢–û–†–ò–Ø –ü–û–ö–£–ü–û–ö
@bot.callback_query_handler(func=lambda call: call.data == 'history')
def callback_menu(call):
    if call.data == 'history':
        user_id = call.from_user.id
        connection = sqlite3.connect(config.get('DB_NAME'))
        cursor = connection.cursor()
        cursor.execute('SELECT * from bills WHERE user_id=?', (user_id,))
        bills = cursor.fetchall()
        info = '–í–æ—Ç —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n'
        for bill in bills:
            info += 'üíéüíµ–ê–π–¥–∏: {user_id}, –ê–π–¥–∏ —Ç–æ–≤–∞—Ä–∞: {item_id}, –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {date}\n'.format(user_id=user_id, item_id=bill[1], date=bill[2])
        cursor.close()
        connection.close()
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back6')
        markup.add(button1)
        bot.send_message(call.message.chat.id, info, reply_markup=markup)


   
# –í–û–ó–í–†–ê–©–ï–ù–ò–ï –° –ò–°–¢–û–†–ò–ò –í –ì–õ–ê–í –≠–ö–†–ê–ù
@bot.callback_query_handler(func=lambda call: call.data == 'back6')
def callback_menu(call):
   if call.data == 'back6':
     markup = types.InlineKeyboardMarkup()
     markup.add(types.InlineKeyboardButton('–ú–µ–Ω—é‚úÖ', callback_data='menu'))
     markup.add(types.InlineKeyboardButton('–ù–ê–®–ò –û–¢–ó–´–í–´üí¨üìä', url='https://clck.ru/374VdC'))
     markup.add(types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='history'))
     markup.add(types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='addbalance'))
     markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='balance'))
     bot.send_photo(call.message.chat.id, parse_mode= 'html',  photo=open('photo.png',  'rb'), caption=f'<b>–ü—Ä–∏–≤–µ—Ç</b>, {call.message.chat.first_name}!\n<b>–Ø –ë–û–¢ –ú–∞–≥–∞–∑–∏–Ω–∞ –†–ï–ô–õ | –î–∏–∑–∞–π–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ. –Ø —è–≤–ª—è—é—Å—å –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Ç–∞–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö</b> üòá',reply_markup=markup)

# –û–°–ù–û–í–ê –ú–ï–ù–Æ
@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def callback_menu(call):
   if call.data == 'menu':
       markup = types.InlineKeyboardMarkup()
       markup.add(types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ã', callback_data='tovar'))
       markup.add(types.InlineKeyboardButton('–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='rekvizit'))
       markup.add(types.InlineKeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æüìä', url='https://clck.ru/374VdC'))
       markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back2'))
       bot.send_photo(call.message.chat.id,parse_mode= 'html',  photo=open('photo2.png',  'rb'), caption=f'–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –°–æ–≤–µ—Ç—É–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìõ<b>–ü–†–ê–í–ò–õ–ê</b>üìõ –∏ –Ω–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. <b>–ü–ï–†–ï–î –ü–û–ö–£–ü–ö–û–ô –ó–ê–ô–î–ò–¢–ï –í –†–ï–ö–í–ò–ó–ò–¢–´!</b>',reply_markup=markup)

# –ò–ó –ú–ï–ù–Æ –í –¢–û–í–ê–†–´
@bot.callback_query_handler(func=lambda call: call.data == 'tovar')
def callback_tovar(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM categories")
    data = cursor.fetchall()
    connection.close()
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back4'))
    for item in data:
        id, type = item
        markup.add(types.InlineKeyboardButton(type, callback_data=f'category_{id}'))

    bot.send_photo(call.message.chat.id, photo=open('photo3.png',  'rb'), caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

# –ü–ï–†–ï–•–û–î –ü–û–°–õ–ï –ö–ê–¢–ï–ì–û–†–ò–ô –í –ö–ê–ö–û–ô –¢–û –ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –í –¢–û–í–ê–†–´
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def callback_category(call):
       category_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
       connection = sqlite3.connect(config.get('DB_NAME'))
       cursor = connection.cursor()
       query = f'''
               SELECT items.id, items.name
               FROM items
               INNER JOIN categories ON items.categories_id = categories.id
               WHERE categories.id = {category_id}
               '''
       cursor.execute(query)
       data = cursor.fetchall()
       connection.close()

       markup = types.InlineKeyboardMarkup()
       markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back5'))
       for item in data:
           item_id, item_name = item
           markup.add(types.InlineKeyboardButton(item_name, callback_data=f'item_{item_id}'))

       bot.send_photo(call.message.chat.id, photo=open('photo2.png',  'rb'), caption=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)

# –ü–ï–†–ï–•–û–î –í –¢–û–í–ê–† –ò–ó –°–ü–ò–°–ö–ê –¢–û–í–ê–†–û–í
@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def callback_item(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    item_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    query = f'''
            SELECT name, desc, price, photo
            FROM items
            WHERE id = {item_id}
            '''
    cursor.execute(query)
    data = cursor.fetchone()
    item_name, item_desc, item_price, item_photo = data
    bot.send_photo(call.message.chat.id, photo=open(f'{item_photo}.png', 'rb'), caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_desc}\n–¶–µ–Ω–∞: {item_price}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back6'))
    markup.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=f'buy_{item_id}'))
    bot.send_message(call.message.chat.id, "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)


# –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def callback_buy(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    user_id = call.from_user.id
    item_id = call.data.split("_")[1]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item_query = '''
            SELECT name, price
            FROM items
            WHERE id = ?'''
    cursor.execute(item_query, (item_id,))
    item_data = cursor.fetchone()
    item_name, item_price_str = item_data
    item_price = int(item_price_str)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balance_query = '''
            SELECT balance
            FROM users
            WHERE id = ?'''
    cursor.execute(balance_query, (user_id,))
    user_balance = cursor.fetchone()[0]

    if user_balance >= item_price:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_balance = user_balance - item_price
        update_query = '''
                   UPDATE users
                   SET balance = ?
                   WHERE id = ?'''
        cursor.execute(update_query, (new_balance, user_id))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ –≤ —Ç–∞–±–ª–∏—Ü—É bills
        insert_query = '''
                   INSERT INTO bills (user_id, item_id, date)
                   VALUES (?, ?, CURRENT_TIMESTAMP)'''
        cursor.execute(insert_query, (user_id, item_id))

        connection.commit()

        bot.send_message(call.message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π! –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.')
    else:
        bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')


# –ü–ï–†–ï–•–û–î –ò–ó –í–´–ë–†–ê–ù–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò –í –ö–ê–¢–ï–ì–û–†–ò–ò
@bot.callback_query_handler(func=lambda call: call.data == 'back5')
def callback_tovar(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM categories")
    data = cursor.fetchall()
    connection.close()
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back4'))
    for item in data:
        id, type = item
        markup.add(types.InlineKeyboardButton(type, callback_data=f'category_{id}'))

    bot.send_photo(call.message.chat.id, photo=open('photo3.png',  'rb'), caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

# –ò–ó –¢–û–í–ê–†–û–í –í –ú–ï–ù–Æ
@bot.callback_query_handler(func=lambda call: call.data == 'back4')
def callback_menu(call):
   if call.data == 'back4':
       markup = types.InlineKeyboardMarkup()
       markup.add(types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ã', callback_data='tovar'))
       markup.add(types.InlineKeyboardButton('–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='rekvizit'))
       markup.add(types.InlineKeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æüìä', url='https://clck.ru/374VdC'))
       markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back2'))
       bot.send_photo(call.message.chat.id,parse_mode= 'html',  photo=open('photo2.png',  'rb'), caption=f'–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –°–æ–≤–µ—Ç—É–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìõ<b>–ü–†–ê–í–ò–õ–ê</b>üìõ –∏ –Ω–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. <b>–ü–ï–†–ï–î –ü–û–ö–£–ü–ö–û–ô –ó–ê–ô–î–ò–¢–ï –í –†–ï–ö–í–ò–ó–ò–¢–´!</b>',reply_markup=markup)

# –í–û–ó–í–†–ê–©–ï–ù–ò–ï –ù–ê –ì–õ–ê–í –≠–ö–†–ê–ù –° –ú–ï–ù–Æ
@bot.callback_query_handler(func=lambda call: call.data == 'back2')
def callback_menu(call):
   if call.data == 'back2':
     markup = types.InlineKeyboardMarkup()
     markup.add(types.InlineKeyboardButton('–ú–µ–Ω—é‚úÖ', callback_data='menu'))
     markup.add(types.InlineKeyboardButton('–ù–ê–®–ò –û–¢–ó–´–í–´üí¨üìä', url='https://clck.ru/374VdC'))
     markup.add(types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data='history'))
     markup.add(types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='addbalance'))
     markup.add(types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='balance'))
     bot.send_photo(call.message.chat.id, parse_mode= 'html',  photo=open('photo.png',  'rb'), caption=f'<b>–ü—Ä–∏–≤–µ—Ç</b>, {call.message.chat.first_name}!\n<b>–Ø –ë–û–¢ –ú–∞–≥–∞–∑–∏–Ω–∞ –†–ï–ô–õ | –î–∏–∑–∞–π–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ. –Ø —è–≤–ª—è—é—Å—å –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Ç–∞–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö</b> üòá',reply_markup=markup)

# –†–ï–ö–í–ò–ó–ò–¢–´ –í –ö–û–¢–û–†–´–ï –ó–ê–•–û–î–Ø–¢ –ò–ó –ú–ï–ù–Æ
@bot.callback_query_handler(func=lambda call: call.data == 'rekvizit')
def callback_menu(call):
   if call.data == 'rekvizit':
     markup = types.InlineKeyboardMarkup()
     button1 = types.InlineKeyboardButton('Donationalerts', url='https://clck.ru/374e7g')
     button2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back3')
     markup.add(button1,button2)
     bot.send_photo(call.message.chat.id,parse_mode= 'html',  photo=open('photo4.png',  'rb'), caption=f'‚ö°üí≥üí∏ –û–ø–ª–∞—Ç—É –∑–∞ —É—Å–ª—É–≥–∏ –º–æ–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ <b>–ú–ò–†</b>: 2202700966606930 –∏–ª–∏ —á–µ—Ä–µ–∑ <b>Donationalerts</b>',reply_markup=markup)

# –í–û–ó–í–†–ê–©–ï–ù–ò–ï –° –†–ï–ö–í–ò–ó–ò–¢–û–í –í –ú–ï–ù–Æ
@bot.callback_query_handler(func=lambda call: call.data == 'back3')
def callback_menu(call):
   if call.data == 'back3':
       markup = types.InlineKeyboardMarkup()
       markup.add(types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ã', callback_data='tovar'))
       markup.add(types.InlineKeyboardButton('–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='rekvizit'))
       markup.add(types.InlineKeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æüìä', url='https://clck.ru/374VdC'))
       markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='back2'))
       bot.send_photo(call.message.chat.id,parse_mode= 'html',  photo=open('photo2.png',  'rb'), caption=f'–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –°–æ–≤–µ—Ç—É–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìõ<b>–ü–†–ê–í–ò–õ–ê</b>üìõ –∏ –Ω–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. <b>–ü–ï–†–ï–î –ü–û–ö–£–ü–ö–û–ô –ó–ê–ô–î–ò–¢–ï –í –†–ï–ö–í–ò–ó–ò–¢–´!</b>',reply_markup=markup)

# –û–¢–í–ï–¢–ö–ê –ù–ê –†–ê–ù–î–û–ú–ù–´–ô –¢–ï–ö–°–¢
@bot.message_handler()
def send_text(message):
    bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...')


bot.polling(none_stop=True, interval=0)







